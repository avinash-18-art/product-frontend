{"ast":null,"code":"// server.js\nconst express = require(\"express\");\nconst multer = require(\"multer\");\nconst XLSX = require(\"xlsx\");\nconst csv = require(\"csv-parser\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst cors = require(\"cors\");\nconst {\n  MongoClient\n} = require(\"mongodb\");\nconst PDFDocument = require(\"pdfkit\");\nconst app = express();\nconst PORT = 5000;\n\n// ====== MongoDB ======\nconst MONGO_URI = \"mongodb://127.0.0.1:27017\";\nconst DB_NAME = \"dashboard_db\";\nlet db;\nMongoClient.connect(MONGO_URI, {\n  useUnifiedTopology: true\n}).then(client => {\n  db = client.db(DB_NAME);\n  console.log(\"✅ Connected to MongoDB\");\n}).catch(err => console.error(\"❌ MongoDB connection failed:\", err));\n\n// ====== Middleware ======\napp.use(cors());\napp.use(express.json());\nconst upload = multer({\n  dest: \"uploads/\"\n});\n\n// ====== Helpers ======\nconst statusList = [\"all\", \"rto\", \"door_step_exchanged\", \"delivered\", \"cancelled\", \"ready_to_ship\", \"shipped\", \"supplier_listed_price\", \"supplier_discounted_price\"];\n\n// Clean any currency/number field\nfunction parsePrice(value) {\n  if (!value) return 0;\n  const clean = value.toString().trim().replace(/[^0-9.\\-]/g, \"\");\n  return parseFloat(clean) || 0;\n}\n\n// Get a value using multiple possible column names (case/space tolerant)\nfunction getColumnValue(row, possibleNames) {\n  const keys = Object.keys(row);\n  const lower = keys.map(k => k.toLowerCase().trim());\n  for (let name of possibleNames) {\n    const idx = lower.indexOf(name.toLowerCase().trim());\n    if (idx !== -1) return row[keys[idx]];\n  }\n  return 0;\n}\n\n// Try to parse date from multiple common columns & formats\nfunction getOrderDate(row) {\n  const possibleDateCols = [\"Order Date\", \"Order date\", \"Date\", \"Created At\", \"Created at\", \"Delivered Date\", \"Order Placed Time\", \"Order Created Date\"];\n  for (let col of possibleDateCols) {\n    if (row[col]) {\n      const d = normalizeToDate(row[col]);\n      if (d) return d;\n    }\n  }\n  return null;\n}\n\n// Accepts values like \"2025-07-03\", \"03/07/2025\", etc.\nfunction normalizeToDate(val) {\n  if (val == null || val === \"\") return null;\n\n  // Excel serial date handling\n  if (typeof val === \"number\") {\n    const excelEpoch = new Date(Date.UTC(1899, 11, 30));\n    const ms = val * 24 * 60 * 60 * 1000;\n    return new Date(excelEpoch.getTime() + ms);\n  }\n  let s = String(val).trim();\n  const parsed = Date.parse(s);\n  if (!Number.isNaN(parsed)) return new Date(parsed);\n  const m = s.match(/^(\\d{1,2})[\\/-](\\d{1,2})[\\/-](\\d{2,4})$/);\n  if (m) {\n    const dd = parseInt(m[1], 10);\n    const mm = parseInt(m[2], 10) - 1;\n    let yyyy = parseInt(m[3], 10);\n    if (yyyy < 100) yyyy += 2000;\n    const d = new Date(yyyy, mm, dd);\n    if (!isNaN(d.getTime())) return d;\n  }\n  return null;\n}\nfunction toDateKey(d) {\n  const yr = d.getFullYear();\n  const mo = String(d.getMonth() + 1).padStart(2, \"0\");\n  const da = String(d.getDate()).padStart(2, \"0\");\n  return `${yr}-${mo}-${da}`;\n}\n\n// ====== Core Categorization (with Daily Profit) ======\nfunction categorizeRows(rows) {\n  const categories = {};\n  statusList.forEach(status => categories[status] = []);\n  categories.other = [];\n  let totalSupplierListedPrice = 0;\n  let totalSupplierDiscountedPrice = 0;\n  let sellInMonthProducts = 0;\n  let deliveredSupplierDiscountedPriceTotal = 0;\n  let totalDoorStepExchanger = 0;\n  const dailyProfits = {};\n  const sellingPrice = 500; // fixed selling price per product\n\n  rows.forEach(row => {\n    const status = (row[\"Reason for Credit Entry\"] || \"\").toLowerCase().trim();\n    categories[\"all\"].push(row);\n    const listedPrice = parsePrice(getColumnValue(row, [\"Supplier Listed Price (Incl. GST + Commission)\", \"Supplier Listed Price\", \"Listed Price\"]));\n    const discountedPrice = parsePrice(getColumnValue(row, [\"Supplier Discounted Price (Incl GST and Commission)\", \"Supplier Discounted Price (Incl GST and Commision)\", \"Supplier Discounted Price\", \"Discounted Price\"]));\n    totalSupplierListedPrice += listedPrice;\n    totalSupplierDiscountedPrice += discountedPrice;\n    const orderDate = getOrderDate(row);\n    const dateKey = orderDate ? toDateKey(orderDate) : \"unknown\";\n    if (status.includes(\"delivered\")) {\n      sellInMonthProducts += 1;\n      deliveredSupplierDiscountedPriceTotal += discountedPrice;\n\n      // ✅ Profit always positive: selling price - discounted price\n      const profit = sellingPrice - discountedPrice;\n      if (!dailyProfits[dateKey]) dailyProfits[dateKey] = 0;\n      dailyProfits[dateKey] += profit;\n    }\n    if (status.includes(\"door_step_exchanged\")) {\n      totalDoorStepExchanger += 80;\n    }\n    let matched = false;\n    if (status.includes(\"rto_complete\") || status.includes(\"rto_locked\") || status.includes(\"rto_initiated\")) {\n      categories[\"rto\"].push(row);\n      matched = true;\n    } else {\n      statusList.forEach(s => {\n        if (s !== \"all\" && s !== \"rto\" && status.includes(s)) {\n          categories[s].push(row);\n          matched = true;\n        }\n      });\n    }\n    if (!matched) categories.other.push(row);\n  });\n\n  // ✅ Correct total profit: sum of per-order profits\n  const totalProfit = sellInMonthProducts * sellingPrice - deliveredSupplierDiscountedPriceTotal;\n  const profitPercent = sellInMonthProducts !== 0 ? totalProfit / (sellInMonthProducts * sellingPrice) * 100 : 0;\n  categories.totals = {\n    totalSupplierListedPrice,\n    totalSupplierDiscountedPrice,\n    sellInMonthProducts,\n    deliveredSupplierDiscountedPriceTotal,\n    totalDoorStepExchanger,\n    totalProfit,\n    profitPercent: profitPercent.toFixed(2),\n    dailyProfits\n  };\n  return categories;\n}\n\n// ====== Upload ======\napp.post(\"/upload\", upload.single(\"file\"), async (req, res) => {\n  const file = req.file;\n  if (!file) return res.status(400).json({\n    error: \"No file uploaded\"\n  });\n  const ext = path.extname(file.originalname).toLowerCase();\n  let rows = [];\n  try {\n    if (ext === \".csv\") {\n      fs.createReadStream(file.path).pipe(csv()).on(\"data\", data => rows.push(data)).on(\"end\", async () => {\n        fs.unlinkSync(file.path);\n        await saveToDB(rows, res);\n      }).on(\"error\", async err => {\n        try {\n          fs.unlinkSync(file.path);\n        } catch {}\n        console.error(\"❌ CSV read error:\", err);\n        return res.status(500).json({\n          error: \"Failed to read CSV\"\n        });\n      });\n    } else if (ext === \".xlsx\" || ext === \".xls\") {\n      const workbook = XLSX.readFile(file.path);\n      const sheetName = workbook.SheetNames[0];\n      rows = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], {\n        raw: true\n      });\n      fs.unlinkSync(file.path);\n      await saveToDB(rows, res);\n    } else {\n      fs.unlinkSync(file.path);\n      return res.status(400).json({\n        error: \"Unsupported file format\"\n      });\n    }\n  } catch (error) {\n    try {\n      fs.unlinkSync(file.path);\n    } catch {}\n    console.error(\"❌ Error processing file:\", error);\n    return res.status(500).json({\n      error: \"Failed to process file\"\n    });\n  }\n});\nasync function saveToDB(rows, res) {\n  if (!db) return res.status(500).json({\n    message: \"MongoDB not connected yet\"\n  });\n  if (!rows || !rows.length) return res.status(400).json({\n    message: \"No data to save\"\n  });\n  const categorized = categorizeRows(rows);\n  try {\n    await db.collection(\"dashboard_data\").insertOne({\n      submittedAt: new Date(),\n      data: rows,\n      totals: categorized.totals,\n      categories: categorized\n    });\n    console.log(\"✅ Uploaded data inserted into MongoDB\");\n    return res.json(categorized);\n  } catch (error) {\n    console.error(\"❌ Error saving uploaded data to MongoDB:\", error);\n    return res.status(500).json({\n      message: \"Failed to save data to MongoDB\"\n    });\n  }\n}\n\n// ====== Profit Graph API ======\napp.get(\"/profit-graph\", async (req, res) => {\n  try {\n    var _result$0$totals;\n    const result = await db.collection(\"dashboard_data\").find().sort({\n      submittedAt: -1\n    }).limit(1).toArray();\n    if (!result.length) return res.status(404).json({\n      error: \"No data found\"\n    });\n    const dailyProfits = ((_result$0$totals = result[0].totals) === null || _result$0$totals === void 0 ? void 0 : _result$0$totals.dailyProfits) || {};\n    let data = Object.entries(dailyProfits).filter(([date]) => date !== \"unknown\").map(([date, profit]) => ({\n      date,\n      profit: Number(profit || 0)\n    })).sort((a, b) => new Date(a.date) - new Date(b.date));\n    const {\n      from,\n      to\n    } = req.query;\n    if (from || to) {\n      data = data.filter(item => {\n        const d = new Date(item.date);\n        const okFrom = from ? d >= new Date(from) : true;\n        const okTo = to ? d <= new Date(to) : true;\n        return okFrom && okTo;\n      });\n    }\n    res.json(data);\n  } catch (err) {\n    console.error(\"❌ Profit graph API error:\", err);\n    res.status(500).json({\n      error: \"Failed to fetch profit graph data\"\n    });\n  }\n});\n\n// ====== Start ======\napp.listen(PORT, () => console.log(`🚀 Server running on http://localhost:${PORT}`));","map":{"version":3,"names":["express","require","multer","XLSX","csv","fs","path","cors","MongoClient","PDFDocument","app","PORT","MONGO_URI","DB_NAME","db","connect","useUnifiedTopology","then","client","console","log","catch","err","error","use","json","upload","dest","statusList","parsePrice","value","clean","toString","trim","replace","parseFloat","getColumnValue","row","possibleNames","keys","Object","lower","map","k","toLowerCase","name","idx","indexOf","getOrderDate","possibleDateCols","col","d","normalizeToDate","val","excelEpoch","Date","UTC","ms","getTime","s","String","parsed","parse","Number","isNaN","m","match","dd","parseInt","mm","yyyy","toDateKey","yr","getFullYear","mo","getMonth","padStart","da","getDate","categorizeRows","rows","categories","forEach","status","other","totalSupplierListedPrice","totalSupplierDiscountedPrice","sellInMonthProducts","deliveredSupplierDiscountedPriceTotal","totalDoorStepExchanger","dailyProfits","sellingPrice","push","listedPrice","discountedPrice","orderDate","dateKey","includes","profit","matched","totalProfit","profitPercent","totals","toFixed","post","single","req","res","file","ext","extname","originalname","createReadStream","pipe","on","data","unlinkSync","saveToDB","workbook","readFile","sheetName","SheetNames","utils","sheet_to_json","Sheets","raw","message","length","categorized","collection","insertOne","submittedAt","get","_result$0$totals","result","find","sort","limit","toArray","entries","filter","date","a","b","from","to","query","item","okFrom","okTo","listen"],"sources":["C:/Users/Avinash/OneDrive/Desktop/excel/Frontend/frontend/src/Components/Excel.js"],"sourcesContent":["// server.js\r\nconst express = require(\"express\");\r\nconst multer = require(\"multer\");\r\nconst XLSX = require(\"xlsx\");\r\nconst csv = require(\"csv-parser\");\r\nconst fs = require(\"fs\");\r\nconst path = require(\"path\");\r\nconst cors = require(\"cors\");\r\nconst { MongoClient } = require(\"mongodb\");\r\nconst PDFDocument = require(\"pdfkit\");\r\n\r\nconst app = express();\r\nconst PORT = 5000;\r\n\r\n// ====== MongoDB ======\r\nconst MONGO_URI = \"mongodb://127.0.0.1:27017\";\r\nconst DB_NAME = \"dashboard_db\";\r\nlet db;\r\nMongoClient.connect(MONGO_URI, { useUnifiedTopology: true })\r\n  .then((client) => {\r\n    db = client.db(DB_NAME);\r\n    console.log(\"✅ Connected to MongoDB\");\r\n  })\r\n  .catch((err) => console.error(\"❌ MongoDB connection failed:\", err));\r\n\r\n// ====== Middleware ======\r\napp.use(cors());\r\napp.use(express.json());\r\nconst upload = multer({ dest: \"uploads/\" });\r\n\r\n// ====== Helpers ======\r\nconst statusList = [\r\n  \"all\",\r\n  \"rto\",\r\n  \"door_step_exchanged\",\r\n  \"delivered\",\r\n  \"cancelled\",\r\n  \"ready_to_ship\",\r\n  \"shipped\",\r\n  \"supplier_listed_price\",\r\n  \"supplier_discounted_price\",\r\n];\r\n\r\n// Clean any currency/number field\r\nfunction parsePrice(value) {\r\n  if (!value) return 0;\r\n  const clean = value.toString().trim().replace(/[^0-9.\\-]/g, \"\");\r\n  return parseFloat(clean) || 0;\r\n}\r\n\r\n// Get a value using multiple possible column names (case/space tolerant)\r\nfunction getColumnValue(row, possibleNames) {\r\n  const keys = Object.keys(row);\r\n  const lower = keys.map((k) => k.toLowerCase().trim());\r\n  for (let name of possibleNames) {\r\n    const idx = lower.indexOf(name.toLowerCase().trim());\r\n    if (idx !== -1) return row[keys[idx]];\r\n  }\r\n  return 0;\r\n}\r\n\r\n// Try to parse date from multiple common columns & formats\r\nfunction getOrderDate(row) {\r\n  const possibleDateCols = [\r\n    \"Order Date\",\r\n    \"Order date\",\r\n    \"Date\",\r\n    \"Created At\",\r\n    \"Created at\",\r\n    \"Delivered Date\",\r\n    \"Order Placed Time\",\r\n    \"Order Created Date\",\r\n  ];\r\n  for (let col of possibleDateCols) {\r\n    if (row[col]) {\r\n      const d = normalizeToDate(row[col]);\r\n      if (d) return d;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n// Accepts values like \"2025-07-03\", \"03/07/2025\", etc.\r\nfunction normalizeToDate(val) {\r\n  if (val == null || val === \"\") return null;\r\n\r\n  // Excel serial date handling\r\n  if (typeof val === \"number\") {\r\n    const excelEpoch = new Date(Date.UTC(1899, 11, 30));\r\n    const ms = val * 24 * 60 * 60 * 1000;\r\n    return new Date(excelEpoch.getTime() + ms);\r\n  }\r\n\r\n  let s = String(val).trim();\r\n\r\n  const parsed = Date.parse(s);\r\n  if (!Number.isNaN(parsed)) return new Date(parsed);\r\n\r\n  const m = s.match(/^(\\d{1,2})[\\/-](\\d{1,2})[\\/-](\\d{2,4})$/);\r\n  if (m) {\r\n    const dd = parseInt(m[1], 10);\r\n    const mm = parseInt(m[2], 10) - 1;\r\n    let yyyy = parseInt(m[3], 10);\r\n    if (yyyy < 100) yyyy += 2000;\r\n    const d = new Date(yyyy, mm, dd);\r\n    if (!isNaN(d.getTime())) return d;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction toDateKey(d) {\r\n  const yr = d.getFullYear();\r\n  const mo = String(d.getMonth() + 1).padStart(2, \"0\");\r\n  const da = String(d.getDate()).padStart(2, \"0\");\r\n  return `${yr}-${mo}-${da}`;\r\n}\r\n\r\n// ====== Core Categorization (with Daily Profit) ======\r\nfunction categorizeRows(rows) {\r\n  const categories = {};\r\n  statusList.forEach((status) => (categories[status] = []));\r\n  categories.other = [];\r\n\r\n  let totalSupplierListedPrice = 0;\r\n  let totalSupplierDiscountedPrice = 0;\r\n  let sellInMonthProducts = 0;\r\n  let deliveredSupplierDiscountedPriceTotal = 0;\r\n  let totalDoorStepExchanger = 0;\r\n\r\n  const dailyProfits = {};\r\n  const sellingPrice = 500; // fixed selling price per product\r\n\r\n  rows.forEach((row) => {\r\n    const status = (row[\"Reason for Credit Entry\"] || \"\").toLowerCase().trim();\r\n    categories[\"all\"].push(row);\r\n\r\n    const listedPrice = parsePrice(\r\n      getColumnValue(row, [\r\n        \"Supplier Listed Price (Incl. GST + Commission)\",\r\n        \"Supplier Listed Price\",\r\n        \"Listed Price\",\r\n      ])\r\n    );\r\n\r\n    const discountedPrice = parsePrice(\r\n      getColumnValue(row, [\r\n        \"Supplier Discounted Price (Incl GST and Commission)\",\r\n        \"Supplier Discounted Price (Incl GST and Commision)\",\r\n        \"Supplier Discounted Price\",\r\n        \"Discounted Price\",\r\n      ])\r\n    );\r\n\r\n    totalSupplierListedPrice += listedPrice;\r\n    totalSupplierDiscountedPrice += discountedPrice;\r\n\r\n    const orderDate = getOrderDate(row);\r\n    const dateKey = orderDate ? toDateKey(orderDate) : \"unknown\";\r\n\r\n    if (status.includes(\"delivered\")) {\r\n      sellInMonthProducts += 1;\r\n      deliveredSupplierDiscountedPriceTotal += discountedPrice;\r\n\r\n      // ✅ Profit always positive: selling price - discounted price\r\n      const profit = sellingPrice - discountedPrice;\r\n      if (!dailyProfits[dateKey]) dailyProfits[dateKey] = 0;\r\n      dailyProfits[dateKey] += profit;\r\n    }\r\n\r\n    if (status.includes(\"door_step_exchanged\")) {\r\n      totalDoorStepExchanger += 80;\r\n    }\r\n\r\n    let matched = false;\r\n    if (\r\n      status.includes(\"rto_complete\") ||\r\n      status.includes(\"rto_locked\") ||\r\n      status.includes(\"rto_initiated\")\r\n    ) {\r\n      categories[\"rto\"].push(row);\r\n      matched = true;\r\n    } else {\r\n      statusList.forEach((s) => {\r\n        if (s !== \"all\" && s !== \"rto\" && status.includes(s)) {\r\n          categories[s].push(row);\r\n          matched = true;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (!matched) categories.other.push(row);\r\n  });\r\n\r\n  // ✅ Correct total profit: sum of per-order profits\r\n  const totalProfit =\r\n    sellInMonthProducts * sellingPrice - deliveredSupplierDiscountedPriceTotal;\r\n\r\n  const profitPercent =\r\n    sellInMonthProducts !== 0\r\n      ? (totalProfit / (sellInMonthProducts * sellingPrice)) * 100\r\n      : 0;\r\n\r\n  categories.totals = {\r\n    totalSupplierListedPrice,\r\n    totalSupplierDiscountedPrice,\r\n    sellInMonthProducts,\r\n    deliveredSupplierDiscountedPriceTotal,\r\n    totalDoorStepExchanger,\r\n    totalProfit,\r\n    profitPercent: profitPercent.toFixed(2),\r\n    dailyProfits,\r\n  };\r\n\r\n  return categories;\r\n}\r\n\r\n// ====== Upload ======\r\napp.post(\"/upload\", upload.single(\"file\"), async (req, res) => {\r\n  const file = req.file;\r\n  if (!file) return res.status(400).json({ error: \"No file uploaded\" });\r\n\r\n  const ext = path.extname(file.originalname).toLowerCase();\r\n  let rows = [];\r\n\r\n  try {\r\n    if (ext === \".csv\") {\r\n      fs.createReadStream(file.path)\r\n        .pipe(csv())\r\n        .on(\"data\", (data) => rows.push(data))\r\n        .on(\"end\", async () => {\r\n          fs.unlinkSync(file.path);\r\n          await saveToDB(rows, res);\r\n        })\r\n        .on(\"error\", async (err) => {\r\n          try {\r\n            fs.unlinkSync(file.path);\r\n          } catch {}\r\n          console.error(\"❌ CSV read error:\", err);\r\n          return res.status(500).json({ error: \"Failed to read CSV\" });\r\n        });\r\n    } else if (ext === \".xlsx\" || ext === \".xls\") {\r\n      const workbook = XLSX.readFile(file.path);\r\n      const sheetName = workbook.SheetNames[0];\r\n      rows = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], { raw: true });\r\n      fs.unlinkSync(file.path);\r\n      await saveToDB(rows, res);\r\n    } else {\r\n      fs.unlinkSync(file.path);\r\n      return res.status(400).json({ error: \"Unsupported file format\" });\r\n    }\r\n  } catch (error) {\r\n    try {\r\n      fs.unlinkSync(file.path);\r\n    } catch {}\r\n    console.error(\"❌ Error processing file:\", error);\r\n    return res.status(500).json({ error: \"Failed to process file\" });\r\n  }\r\n});\r\n\r\nasync function saveToDB(rows, res) {\r\n  if (!db) return res.status(500).json({ message: \"MongoDB not connected yet\" });\r\n  if (!rows || !rows.length)\r\n    return res.status(400).json({ message: \"No data to save\" });\r\n\r\n  const categorized = categorizeRows(rows);\r\n\r\n  try {\r\n    await db.collection(\"dashboard_data\").insertOne({\r\n      submittedAt: new Date(),\r\n      data: rows,\r\n      totals: categorized.totals,\r\n      categories: categorized,\r\n    });\r\n    console.log(\"✅ Uploaded data inserted into MongoDB\");\r\n    return res.json(categorized);\r\n  } catch (error) {\r\n    console.error(\"❌ Error saving uploaded data to MongoDB:\", error);\r\n    return res.status(500).json({ message: \"Failed to save data to MongoDB\" });\r\n  }\r\n}\r\n\r\n// ====== Profit Graph API ======\r\napp.get(\"/profit-graph\", async (req, res) => {\r\n  try {\r\n    const result = await db\r\n      .collection(\"dashboard_data\")\r\n      .find()\r\n      .sort({ submittedAt: -1 })\r\n      .limit(1)\r\n      .toArray();\r\n\r\n    if (!result.length) return res.status(404).json({ error: \"No data found\" });\r\n\r\n    const dailyProfits = result[0].totals?.dailyProfits || {};\r\n    let data = Object.entries(dailyProfits)\r\n      .filter(([date]) => date !== \"unknown\")\r\n      .map(([date, profit]) => ({ date, profit: Number(profit || 0) }))\r\n      .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n    const { from, to } = req.query;\r\n    if (from || to) {\r\n      data = data.filter((item) => {\r\n        const d = new Date(item.date);\r\n        const okFrom = from ? d >= new Date(from) : true;\r\n        const okTo = to ? d <= new Date(to) : true;\r\n        return okFrom && okTo;\r\n      });\r\n    }\r\n\r\n    res.json(data);\r\n  } catch (err) {\r\n    console.error(\"❌ Profit graph API error:\", err);\r\n    res.status(500).json({ error: \"Failed to fetch profit graph data\" });\r\n  }\r\n});\r\n\r\n// ====== Start ======\r\napp.listen(PORT, () =>\r\n  console.log(`🚀 Server running on http://localhost:${PORT}`)\r\n);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}